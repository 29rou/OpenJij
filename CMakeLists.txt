cmake_minimum_required(VERSION 3.16)
project(openjij)

option(OPENJIJ_BUILD_SHARED_LIBS "build mylib as a shared library" OFF)

if (APPLE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-command-line-argument")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -Wno-unused-command-line-argument")
endif()

set(CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_VERBOSE_MAKEFILE TRUE)
set(CMAKE_CXX_STANDARD 17)

 

##### Set default behavior #####
set(DEFAULT_USE_OMP Yes)
set(DEFAULT_USE_CUDA Yes)
set(DEFAULT_USE_TEST No)
option(USE_TEST "Use test code" No)


# Use OpenMP as default behavior
if(NOT DEFINED USE_OMP)
    set(USE_OMP ${DEFAULT_USE_OMP})
endif()

if(NOT DEFINED USE_CUDA)
    include(CheckLanguage)
    check_language(CUDA)
    if(CMAKE_CUDA_COMPILER)
        enable_language(CUDA)
        set(USE_CUDA ${DEFAULT_USE_CUDA})

        #for cuda-memcheck
        # set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -lineinfo")
        #set CXX compiler to nvcc host compiler in order to avoid linker error
        # set(CUDA_HOST_COMPILER "${CMAKE_CXX_COMPILER}")
    else()
        message(STATUS "No CUDA support")
        set(USE_CUDA No)
    endif()
endif()

if(NOT DEFINED USE_TEST)
    set(USE_TEST ${DEFAULT_USE_TEST})
endif()

message(STATUS "USE_OMP = ${USE_OMP}")
message(STATUS "USE_CUDA = ${USE_CUDA}")
message(STATUS "USE_TEST = ${USE_TEST}")

if(USE_CUDA)
    add_definitions(-DUSE_CUDA)
endif()

if(USE_OMP)
    if(APPLE) 
      if(NOT CMAKE_OSX_ARCHITECTURES)
        message(STATUS "APPLE X86-64")
        set(OpenMP_DIR /usr/local/opt/libomp)
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
           add_definitions(-DUSE_OMP)
	endif()
      elseif(${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64")
        message(STATUS "APPLE SILICON")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
           add_definitions(-DUSE_OMP)
        else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      elseif(${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64;x86_64")
        message(STATUS "CAN NOT USE OMP UNIVERSAL2!!")
      else()
        message(STATUS "APPLE X86-64")
	set(OpenMP_DIR /usr/local/opt/libomp)
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
           add_definitions(-DUSE_OMP)
	endif()
      endif()
    else()
      find_package(OpenMP REQUIRED)
      if(OpenMP_FOUND)
        message(STATUS "OMP_FOUND = YES")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        add_definitions(-DUSE_OMP)
      endif()
    endif()
endif()

if (APPLE)
    find_package(BLAS)
    find_package(LAPACK)
endif()

list(APPEND CMAKE_MODULE_PATH external)

if(USE_TEST)
       include(external/googletest.cmake)          
else()
	message(STATUS "Skip downloding googletest")
endif()

include(external/pybind11.cmake)
include(external/eigen.cmake)
include(external/json.cmake)
include(external/pybind11-json.cmake)

find_package(Python REQUIRED COMPONENTS Development.Module)
#find_package(pybind11 REQUIRED CONFIG)

add_subdirectory(src)
add_subdirectory(openjij)
if(USE_TEST)
    add_subdirectory(tests)
endif()
