name: Build Test CMake

on:
  workflow_dispatch:

env:
  Python_Version: 3.9

jobs:
  build_cmake:
    name: Build wheels ${{ matrix.OS }} 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:       
        include:  
         #- os: ubuntu-latest
         - os: macos-latest  
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: ${{env.Python_Version}}
      - name: Python Cache Key
        shell: bash
        run: |
          echo $(which python) > /tmp/python_version.txt
      - name: Get pip cache dir
        shell: bash
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
           path: ${{ steps.pip-cache.outputs.dir }}
           key: ${{ runner.os }}-pip-${{ hashFiles('/tmp/python_version.txt') }}
           restore-keys: |
              ${{ runner.os }}-pip-
      - name: Update
        run: | 
         pip install --upgrade pip wheel setuptools build
      - name: Install Dep
        if: ${{matrix.os == 'macos-latest'}}
        run: | 
         pip install delocate
         brew install libomp
      - name: Build 
        if: ${{matrix.os == 'macos-latest'}}
        run: |
          export USE_OMP=True
          export CFLAGS="-O3 -flto -pipe -lcblas -lclapack -framework Accelerate -framework OpenCL"
          export CXXFLAGS="-O3 -flto -pipe -lcblas -lclapack -framework Accelerate -framework OpenCL"
          python -m build 
      - name: Build 
        if: ${{matrix.os == 'ubuntu-latest'}}
        id: build
        run: |
          python -m build  
          cd dist
          for f in *.whl; do echo "::set-output name=wheel::$f"; done
      - name: Delocate List
        if: ${{matrix.os == 'macos-latest'}}
        working-directory: dist 
        run: delocate-listdeps --all --depending ./${{steps.build.outputs.wheel}}
      - name: Wheel 
        if: ${{matrix.os == 'macos-latest'}}
        working-directory: dist 
        run: |
           python -m wheel unpack ./${{steps.build.outputs.wheel}}
      - name: Delocate List
        if: ${{matrix.os == 'macos-latest'}}
        working-directory: dist 
        run: |
          mkdir ../delocate
          delocate-wheel  --check-archs -vv --require-archs x86-64 -w ../delocate  ./${{steps.build.outputs.wheel}}
      - name: Delocate List
        if: ${{matrix.os == 'macos-latest'}}
        working-directory: delocate
        run: for w in *.whl; do delocate-listdeps --all --depending $w; done
      - name: IMPORT
        if: ${{matrix.os == 'macos-latest'}}
        working-directory: delocate
        run: |
          for w in *.whl; do pip install $w; done
          python -c 'import pprint; import openjij; pprint.pprint(dir(openjij), compact=True)'
      - name: IMPORT
        if: ${{matrix.os == 'macos-latest'}}
        working-directory: delocate
        continue-on-error: true
        run: |
          python -c 'import pprint; import cxxjij; pprint.pprint(dir(cxxjij), compact=True)'
      - name: IMPORT
        if: ${{matrix.os == 'ubuntu-latest'}}
        working-directory: dist
        run: |
          for w in *.whl; do pip install $w; done
          python -c 'import pprint; import openjij; pprint.pprint(dir(openjij), compact=True)'
      - name: IMPORT
        if: ${{matrix.os == 'ubuntu-latest'}}
        working-directory: dist
        continue-on-error: true
        run: |
          python -c 'import pprint; import cxxjij; pprint.pprint(dir(cxxjij), compact=True)'
      - name: IMPORT
        run: |
          pip install --force-reinstall --upgrade openjij
          python -c 'import pprint; import openjij; pprint.pprint(dir(openjij), compact=True)'
      - name: IMPORT
        continue-on-error: true
        run: |
          python -c 'import pprint; import cxxjij; pprint.pprint(dir(cxxjij), compact=True)'
      - uses: actions/upload-artifact@v2
        with:
          name: WHEEL
          path: ./dist/*.whl
          retention-days: 30
      #- name: Build 
     #   run: |
      #    python setup.py build --debug test
      

        
           
